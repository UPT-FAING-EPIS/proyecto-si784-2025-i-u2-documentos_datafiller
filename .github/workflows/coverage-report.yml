name: Coverage Report

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_datafiller
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring, xdebug
        coverage: xdebug
    
    - name: Verify DATAFILLER directory structure
      run: |
        echo "Checking directory structure:"
        ls -la
        echo "DATAFILLER contents:"
        ls -la DATAFILLER/ || echo "DATAFILLER directory not found"
        echo "Checking for composer.json:"
        ls -la DATAFILLER/composer.json || echo "composer.json not found in DATAFILLER"
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: DATAFILLER/vendor
        key: ${{ runner.os }}-php-${{ hashFiles('DATAFILLER/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      working-directory: ./DATAFILLER
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents:"
        ls -la
        composer install --prefer-dist --no-progress --no-scripts
        composer dump-autoload

    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_datafiller;"
        mysql -h 127.0.0.1 -u root -proot -e "SHOW DATABASES;"
      
    - name: Run tests with coverage
      working-directory: ./DATAFILLER
      env:
        DB_HOST: 127.0.0.1
        DB_NAME: test_datafiller
        DB_USER: root
        DB_PASS: root
      run: |
        echo "Running tests from: $(pwd)"
        mkdir -p coverage
        vendor/bin/phpunit --version
        vendor/bin/phpunit --coverage-html coverage --coverage-clover coverage.xml --coverage-text --colors=never

    - name: Check coverage threshold
      working-directory: ./DATAFILLER
      run: |
        if [ ! -f "coverage.xml" ]; then
          echo "‚ùå coverage.xml not found"
          exit 1
        fi
        
        COVERAGE=$(php -r "
        if (file_exists('coverage.xml')) {
            \$xml = simplexml_load_file('coverage.xml');
            if (\$xml && \$xml->project && \$xml->project->metrics) {
                \$metrics = \$xml->project->metrics;
                \$statements = (int)\$metrics['statements'];
                \$coveredstatements = (int)\$metrics['coveredstatements'];
                if (\$statements > 0) {
                    \$percentage = (\$coveredstatements / \$statements) * 100;
                    echo number_format(\$percentage, 2);
                } else {
                    echo '0.00';
                }
            } else {
                echo '0.00';
            }
        } else {
            echo '0.00';
        }
        ")
        
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          echo "‚úÖ Coverage $COVERAGE% meets minimum requirement of 70%"
          echo "COVERAGE_PASSED=true" >> $GITHUB_ENV
          echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
        else
          echo "‚ùå Coverage $COVERAGE% is below minimum requirement of 70%"
          echo "COVERAGE_PASSED=false" >> $GITHUB_ENV
          echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
          echo "‚ö†Ô∏è Note: This is just for demonstration. In production, this would fail the build."
          # exit 1  # Comentado para permitir que el workflow contin√∫e para demo
        fi

    - name: Generate coverage badge
      working-directory: ./DATAFILLER
      run: |
        COVERAGE=${{ env.COVERAGE_PERCENTAGE }}
        COLOR="red"
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="orange"
        fi
        
        curl -o coverage/badge.svg "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./DATAFILLER/coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./DATAFILLER/coverage
        destination_dir: coverage
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const coverage = '${{ env.COVERAGE_PERCENTAGE }}';
          const passed = '${{ env.COVERAGE_PASSED }}' === 'true';
          const emoji = passed ? '‚úÖ' : '‚ùå';
          const status = passed ? 'PASSED' : 'FAILED';
          
          const comment = \`
          ## \${emoji} Coverage Report \${status}
          
          **Coverage:** \${coverage}%
          **Minimum Required:** 70%
          **Status:** \${status}
          
          \${passed ? 
            \`üéâ Great job! Coverage meets the minimum requirement.
            
          üìä [View detailed coverage report](https://\${context.repo.owner}.github.io/\${context.repo.repo}/coverage/)\` :
            \`‚ö†Ô∏è Coverage is below the minimum requirement of 70%.
            
          Please add more tests to improve coverage.\`}
          \`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });